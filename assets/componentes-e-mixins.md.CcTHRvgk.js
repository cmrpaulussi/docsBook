import{_ as e,c as o,ae as t,o as r}from"./chunks/framework.CYu0QblF.js";const u=JSON.parse('{"title":"Componentes e Mixins","description":"","frontmatter":{"title":"Componentes e Mixins"},"headers":[],"relativePath":"componentes-e-mixins.md","filePath":"componentes-e-mixins.md"}'),s={name:"componentes-e-mixins.md"};function i(n,a,l,d,c,m){return r(),o("div",null,a[0]||(a[0]=[t('<p>Esta página resume os componentes e mixins principais usados no projeto. Para cada item há: propósito, quando usar, entradas/saídas e observações.</p><h3 id="getimgmixin" tabindex="-1">GetImgMixin <a class="header-anchor" href="#getimgmixin" aria-label="Permalink to &quot;GetImgMixin&quot;">​</a></h3><ul><li><strong>Propósito</strong>: recuperar imagens armazenadas no MongoDB como Base64 e preparar para exibição no frontend.</li><li><strong>Entrada</strong>: identificador da imagem (id ou referência).</li><li><strong>Saída</strong>: string Base64 pronta para uso em src de <code>&lt;img&gt;</code> (data:image/*;base64,...).</li><li><strong>Quando usar</strong>: volumes baixos/medianos de imagens, protótipos ou quando não há infraestrutura de storage externo.</li><li><strong>Observações</strong>: armazenar imagens como Base64 aumenta o tamanho do banco e impacta backup/latência. Para grandes volumes prefira GridFS ou object storage (S3) com CDN.</li></ul><h3 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h3><ul><li><strong>Propósito</strong>: cabeçalho principal da aplicação com navegação.</li><li><strong>Comportamento</strong>: contém links (router-link) e estilos.</li><li><strong>Observações</strong>: só se preocupe com lógica extra (ex.: controle de acesso) se necessário.</li></ul><h3 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h3><ul><li><strong>Propósito</strong>: rodapé com versão do sistema e informações fixas.</li><li><strong>Observações</strong>: manter conteúdo estático e pequenas informações sobre a aplicação.</li></ul><h3 id="logindetails" tabindex="-1">LoginDetails <a class="header-anchor" href="#logindetails" aria-label="Permalink to &quot;LoginDetails&quot;">​</a></h3><ul><li><strong>Propósito</strong>: exibir informações do usuário, botão sair e atalho para CRUD.</li><li><strong>Entrada</strong>: estado de autenticação (store/token).</li><li><strong>Saída</strong>: ações de logout e navegação.</li><li><strong>Observações</strong>: não implemente lógica de autenticação diretamente aqui — use serviços/Stores.</li></ul><h3 id="itemcard" tabindex="-1">ItemCard <a class="header-anchor" href="#itemcard" aria-label="Permalink to &quot;ItemCard&quot;">​</a></h3><ul><li><strong>Propósito</strong>: exibir produtos/itens em cartão reutilizável.</li><li><strong>Entrada</strong>: objeto item (referência, imagens, preço, atributos).</li><li><strong>Saída</strong>: visual do card, evento de click que redireciona para a prateleira (link montado por LinkBuilder).</li><li><strong>Observações</strong>: ItemCard faz fetch adicional para disponibilidade quando necessário; prefira injeção de dependências (serviço/API) para facilitar testes.</li></ul><h3 id="chatbot-chatbotia" tabindex="-1">ChatBot (ChatBotIa) <a class="header-anchor" href="#chatbot-chatbotia" aria-label="Permalink to &quot;ChatBot (ChatBotIa)&quot;">​</a></h3><ul><li><strong>Propósito</strong>: componente de interação com IA que usa o contexto do book para respostas mais assertivas.</li><li><strong>Entrada</strong>: texto de consulta e contexto do book.</li><li><strong>Saída</strong>: resposta textual sugerida e ações (links, sugestões de produtos).</li><li><strong>Observações</strong>: limite o contexto enviado para a IA por custo e performance.</li></ul><h3 id="pesquisa" tabindex="-1">Pesquisa <a class="header-anchor" href="#pesquisa" aria-label="Permalink to &quot;Pesquisa&quot;">​</a></h3><ul><li><strong>Propósito</strong>: componente de busca e filtros globais.</li><li><strong>Entrada</strong>: termos de pesquisa, filtros (cor, tamanho, categoria).</li><li><strong>Saída</strong>: conjunto de resultados filtrados e eventos para atualizar a store.</li><li><strong>Observações</strong>: cada tipo de filtro é implementado como função interna; mantenha funções puras e testáveis.</li></ul><p>Se quiser, posso adicionar exemplos curtos de props esperadas para cada componente (trechos de interface) — deseja isso?</p>',16)]))}const g=e(s,[["render",i]]);export{u as __pageData,g as default};
