import{_ as e,c as i,ae as o,o as s}from"./chunks/framework.CYu0QblF.js";const m=JSON.parse('{"title":"Páginas","description":"","frontmatter":{"title":"Páginas"},"headers":[],"relativePath":"paginas.md","filePath":"paginas.md"}'),r={name:"paginas.md"};function n(l,a,t,d,c,p){return s(),i("div",null,a[0]||(a[0]=[o('<p>Resumo das páginas principais da aplicação, responsabilidades e pontos de atenção.</p><h2 id="inicioview" tabindex="-1">InicioView <a class="header-anchor" href="#inicioview" aria-label="Permalink to &quot;InicioView&quot;">​</a></h2><ul><li>Propósito: página inicial da aplicação; orquestra carregamento e exibição dos dados principais.</li><li>Responsabilidades: <ul><li>Carregar dados iniciais da API (itens, cores, tamanhos, categorias).</li><li>Gerenciar o estado do menu e navegação inicial.</li><li>Importar e renderizar componentes centrais: Pesquisa, ItemCard, ChatBotIa.</li></ul></li><li>Fluxo resumido: inicializa → busca dados via apiStore → popula stores → renderiza componentes.</li><li>Observações: mantenha aqui apenas lógica de apresentação e orquestração; regras de negócio devem ficar em serviços/stores.</li></ul><h2 id="loginview" tabindex="-1">LoginView <a class="header-anchor" href="#loginview" aria-label="Permalink to &quot;LoginView&quot;">​</a></h2><ul><li>Propósito: gerenciar autenticação de usuários.</li><li>Responsabilidades: <ul><li>Capturar credenciais, validar no backend (callLogin) e armazenar token/estado de sessão.</li><li>Mostrar feedback (toast/notify) em caso de erro ou sucesso.</li></ul></li><li>Observações: não coloque lógica sensível no componente; use serviços/Stores para chamadas e tratamento de tokens.</li></ul><h2 id="crudview" tabindex="-1">CrudView <a class="header-anchor" href="#crudview" aria-label="Permalink to &quot;CrudView&quot;">​</a></h2><ul><li>Propósito: interface de administração para criar/editar/remover itens do Book (itensCollections).</li><li>Responsabilidades: <ul><li>Formulário de criação/edição com validações para campos obrigatórios.</li><li>Upload/gestão de imagens (Base64) — conversão e pré-load durante o ciclo de vida do componente.</li><li>Manter arrays (<code>tamanhos</code>, <code>cores</code>, <code>infoText</code>) como arrays válidos antes de enviar para a API.</li></ul></li><li>Pontos de atenção: <ul><li>As chamadas de API devem ser validadas e tratadas quanto a erros de rede.</li><li>Cuidado com o tamanho do payload ao armazenar imagens em Base64 no banco.</li></ul></li></ul>',7)]))}const g=e(r,[["render",n]]);export{m as __pageData,g as default};
